name: Publish ESIHub and Docs

on:
  push:
    branches:
      - release
      - develop
    tags:
      - 'v*'
  release:
    types: [created]

permissions:
  contents: write
  id-token: write

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry self add "poetry-dynamic-versioning[plugin]"
        poetry install
        poetry add mkdocs mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-i18n mkdocs-minify-plugin

    - name: Run tests
      run: poetry run pytest --cov=./ --cov-report=xml

    - name: Upload coverage to Codecov
      if : always()
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: ${{ github.repository }}
        files: ./coverage.xml

    - name: Check and set version
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "")
        if [ -n "$LATEST_TAG" ]; then
          CURRENT_VERSION=$(poetry version --short)
          echo "Latest tag: $LATEST_TAG"
          echo "Current version: $CURRENT_VERSION"
          if [ "$CURRENT_VERSION" != "${LATEST_TAG#v}" ]; then
            poetry version ${LATEST_TAG#v}
            echo "Version updated to: $(poetry version --short)"
          fi
        else
          echo "No valid version tag found. Using current version."
        fi

    - name: Build and verify package
      run: |
        poetry build
        pip install twine
        twine check dist/*

    - name: Publish to PyPI
      if: github.event_name == 'release'
      env:
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        poetry config pypi-token.pypi $PYPI_PASSWORD
        poetry publish

    - name: Build MkDocs documentation
      run: |
        poetry run mkdocs build --site-dir ./site

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        force_orphan: true
        cname: esihub.siege-green.com