{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ESIHub","text":"<p>ESIHub is a powerful, asynchronous Python client for interacting with the EVE Online ESI (EVE Swagger Interface) API. It provides developers with a robust, efficient, and easy-to-use interface for building EVE Online applications.</p>"},{"location":"#navigation","title":"Navigation","text":"<ul> <li>Authentication</li> <li>API Reference</li> <li>Advanced Usage</li> <li>Configuration</li> <li>Error Handling</li> <li>Examples</li> <li>Development Setup</li> <li>Contributing</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Asynchronous Operations: Built on <code>aiohttp</code> for high-performance API interactions</li> <li>Automatic Rate Limiting: Stay within EVE Online's API usage guidelines effortlessly</li> <li>Efficient Caching: Reduce unnecessary API calls with Redis integration</li> <li>Token Management: Automatic token refresh and secure storage</li> <li>Robust Error Handling: Custom exceptions for different error scenarios</li> <li>Comprehensive Logging: Detailed logs for easy debugging and monitoring</li> <li>Event System: Customizable hooks for request lifecycle events</li> <li>Batch Request Processing: Make multiple requests concurrently for improved performance</li> <li>Easy Configuration: Simple setup with environment variables</li> <li>Extensive Test Coverage: Ensure reliability with our comprehensive test suite</li> <li>Python 3.11+ Support: Leverage the latest Python features for improved performance and type hinting</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here's a simple example to get you started with ESIHub:</p> <pre><code>import asyncio\nfrom esihub import ESIHubClient\n\nasync def main():\n    client = ESIHubClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        callback_url=\"your_callback_url\"\n    )\n\n    async with client:\n        # Get character information\n        character_id = 12345\n        character_info = await client.get_characters_character_id(character_id=character_id)\n        print(f\"Character Info: {character_info}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>You can install ESIHub using pip:</p> <pre><code>pip install esihub\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Authentication: Learn how to authenticate with the EVE Online SSO</li> <li>API Reference: Detailed documentation of all available methods</li> <li>Advanced Usage: Explore advanced features like caching, rate limiting, and event hooks</li> <li>Configuration: Learn how to configure ESIHub for your needs</li> <li>Error Handling: Understand how to handle different types of errors</li> <li>Examples: See ESIHub in action with real-world examples</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to ESIHub! If you'd like to contribute, please check out our Contributing Guide.</p>"},{"location":"#support","title":"Support","text":"<p>If you encounter any issues or have questions, please file an issue on our GitHub repository.</p> <p>Happy coding with ESIHub!</p>"},{"location":"CONTRIBUTING/","title":"Contributing to ESIHub","text":"<p>We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's:</p> <ul> <li>Reporting a bug</li> <li>Discussing the current state of the code</li> <li>Submitting a fix</li> <li>Proposing new features</li> <li>Becoming a maintainer</li> </ul>"},{"location":"CONTRIBUTING/#we-develop-with-github","title":"We Develop with Github","text":"<p>We use github to host code, to track issues and feature requests, as well as accept pull requests.</p>"},{"location":"CONTRIBUTING/#we-use-github-flow-so-all-code-changes-happen-through-pull-requests","title":"We Use Github Flow, So All Code Changes Happen Through Pull Requests","text":"<p>Pull requests are the best way to propose changes to the codebase. We actively welcome your pull requests:</p> <ol> <li>Fork the repo and create your branch from <code>main</code>.</li> <li>If you've added code that should be tested, add tests.</li> <li>If you've changed APIs, update the documentation.</li> <li>Ensure the test suite passes.</li> <li>Make sure your code lints.</li> <li>Issue that pull request!</li> </ol>"},{"location":"CONTRIBUTING/#any-contributions-you-make-will-be-under-the-mit-software-license","title":"Any contributions you make will be under the MIT Software License","text":"<p>In short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern.</p>"},{"location":"CONTRIBUTING/#report-bugs-using-githubs-issues","title":"Report bugs using Github's issues","text":"<p>We use GitHub issues to track public bugs. Report a bug by opening a new issue; it's that easy!</p>"},{"location":"CONTRIBUTING/#write-bug-reports-with-detail-background-and-sample-code","title":"Write bug reports with detail, background, and sample code","text":"<p>Great Bug Reports tend to have:</p> <ul> <li>A quick summary and/or background</li> <li>Steps to reproduce</li> <li>Be specific!</li> <li>Give sample code if you can.</li> <li>What you expected would happen</li> <li>What actually happens</li> <li>Notes (possibly including why you think this might be happening, or stuff you tried that didn't work)</li> </ul>"},{"location":"CONTRIBUTING/#use-a-consistent-coding-style","title":"Use a Consistent Coding Style","text":"<ul> <li>4 spaces for indentation rather than tabs</li> <li>You can try running <code>black</code> for style unification</li> </ul>"},{"location":"CONTRIBUTING/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under its MIT License.</p>"},{"location":"CONTRIBUTING/#references","title":"References","text":"<p>This document was adapted from the open-source contribution guidelines for Facebook's Draft</p>"},{"location":"advanced_usage/","title":"Advanced Usage","text":"<p>This guide covers advanced features and usage patterns for ESIHub.</p>"},{"location":"advanced_usage/#caching","title":"Caching","text":"<p>ESIHub uses Redis for caching API responses. You can configure the Redis URL in your environment:</p> <pre><code>export ESI_REDIS_URL=redis://localhost:6379\n</code></pre> <p>The cache is used automatically for all requests. If a cached response is available and not expired, it will be returned instead of making a new API request.</p>"},{"location":"advanced_usage/#rate-limiting","title":"Rate Limiting","text":"<p>ESIHub implements automatic rate limiting to comply with EVE Online's API guidelines. The rate limiter ensures that your application doesn't exceed the allowed number of requests per second.</p> <p>You can customize the rate limit:</p> <pre><code>from esihub.core.rate_limiter import ESIRateLimiter\n\ncustom_rate_limiter = ESIRateLimiter(rate=100, per=1.0)\nclient = ESIHubClient(..., rate_limiter=custom_rate_limiter)\n</code></pre>"},{"location":"advanced_usage/#event-system","title":"Event System","text":"<p>ESIHub provides an event system that allows you to hook into the request lifecycle:</p> <pre><code>@client.event_system.on('before_request')\ndef on_before_request(**kwargs):\n    print(f\"About to make a request: {kwargs['method']} {kwargs['path']}\")\n\n@client.event_system.on('after_request')\ndef on_after_request(**kwargs):\n    print(f\"Request completed: {kwargs['method']} {kwargs['path']}\")\n</code></pre>"},{"location":"advanced_usage/#batch-requests","title":"Batch Requests","text":"<p>You can make multiple requests concurrently using the batch_request method:</p> <pre><code>results = await client.batch_request([\n    {\"method\": \"GET\", \"path\": \"/characters/123/\"},\n    {\"method\": \"GET\", \"path\": \"/corporations/456/\"}\n])\n</code></pre>"},{"location":"advanced_usage/#custom-session-management","title":"Custom Session Management","text":"<p>For more control over the aiohttp ClientSession:</p> <pre><code>from esihub.core.connection_pool import ESIConnectionPool\n\ncustom_pool = ESIConnectionPool(pool_size=200)\nclient = ESIHubClient(..., connection_pool=custom_pool)\n</code></pre>"},{"location":"advanced_usage/#logging","title":"Logging","text":"<p>ESIHub uses Python's built-in logging module. You can configure the log level:</p> <pre><code>import logging\nlogging.getLogger('esihub').setLevel(logging.DEBUG)\n</code></pre> <p>These advanced features allow you to fine-tune ESIHub's behavior to meet your application's specific needs.</p>"},{"location":"api_reference/","title":"API Reference","text":"<p>This document provides a detailed description of the ESIHub API.</p>"},{"location":"api_reference/#esihubclient","title":"ESIHubClient","text":"<p>The main class for interacting with the EVE Online ESI API.</p>"},{"location":"api_reference/#constructor","title":"Constructor","text":"<pre><code>ESIHubClient(client_id: str, client_secret: str, callback_url: str, base_url: str = \"https://esi.evetech.net\")\n</code></pre> <ul> <li><code>client_id</code>: Your EVE Online application's client ID.</li> <li><code>client_secret</code>: Your EVE Online application's client secret.</li> <li><code>callback_url</code>: The callback URL for your application.</li> <li><code>base_url</code>: The base URL for the ESI API (default: \"https://esi.evetech.net\").</li> </ul>"},{"location":"api_reference/#methods","title":"Methods","text":""},{"location":"api_reference/#get_authorize_url","title":"get_authorize_url","text":"<pre><code>async def get_authorize_url(scopes: Optional[str] = None, state: Optional[str] = None) -&gt; str\n</code></pre> <p>Returns the authorization URL for the EVE SSO process.</p>"},{"location":"api_reference/#get_access_token","title":"get_access_token","text":"<pre><code>async def get_access_token(code: str) -&gt; Dict[str, Any]\n</code></pre> <p>Exchanges an authorization code for an access token.</p>"},{"location":"api_reference/#refresh_token","title":"refresh_token","text":"<pre><code>async def refresh_token(refresh_token: str) -&gt; Dict[str, Any]\n</code></pre> <p>Refreshes an expired access token.</p>"},{"location":"api_reference/#request","title":"request","text":"<pre><code>async def request(method: str, path: str, character_id: Optional[int] = None, **kwargs) -&gt; Dict[str, Any]\n</code></pre> <p>Makes a request to the ESI API.</p>"},{"location":"api_reference/#batch_request","title":"batch_request","text":"<pre><code>async def batch_request(requests: List[Dict[str, Any]]) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Makes multiple requests concurrently.</p>"},{"location":"api_reference/#dynamically-generated-methods","title":"Dynamically Generated Methods","text":"<p>ESIHub dynamically generates methods based on the ESI Swagger specification. These methods correspond to ESI endpoints and follow the naming convention of the <code>operationId</code> in the Swagger spec.</p> <p>For example:</p> <ul> <li><code>get_characters_character_id(character_id: int) -&gt; Dict[str, Any]</code></li> <li><code>get_corporations_corporation_id(corporation_id: int) -&gt; Dict[str, Any]</code></li> </ul> <p>Refer to the ESI Swagger UI for a complete list of available endpoints and their parameters.</p>"},{"location":"authentication/","title":"Authentication","text":"<p>ESIHub uses EVE Online's Single Sign-On (SSO) system for authentication. This guide will walk you through the process of authenticating your application and managing tokens.</p>"},{"location":"authentication/#setting-up-sso","title":"Setting Up SSO","text":"<ol> <li>Register your application on the EVE Developers site.</li> <li>Note your Client ID and Secret Key.</li> <li>Set up your callback URL.</li> </ol>"},{"location":"authentication/#initializing-the-client","title":"Initializing the Client","text":"<pre><code>from esihub import ESIHubClient\n\nclient = ESIHubClient(\n    client_id=\"your_client_id\",\n    client_secret=\"your_client_secret\",\n    callback_url=\"your_callback_url\"\n)\n</code></pre>"},{"location":"authentication/#getting-an-authorization-url","title":"Getting an Authorization URL","text":"<pre><code>auth_url = await client.get_authorize_url()\nprint(f\"Please visit this URL to authorize: {auth_url}\")\n</code></pre>"},{"location":"authentication/#exchanging-the-code-for-tokens","title":"Exchanging the Code for Tokens","text":"<p>After the user authorizes your application, they will be redirected to your callback URL with a code parameter. Use this code to get access and refresh tokens:</p> <pre><code>code = \"code_from_callback_url\"\ntokens = await client.get_access_token(code)\n</code></pre>"},{"location":"authentication/#using-tokens-for-requests","title":"Using Tokens for Requests","text":"<pre><code>character_id = 12345\ncharacter_info = await client.get_characters_character_id(character_id=character_id, token=tokens['access_token'])\n</code></pre>"},{"location":"authentication/#refreshing-tokens","title":"Refreshing Tokens","text":"<p>ESIHub automatically handles token refreshing. If a token is about to expire, it will be refreshed before making the request.</p>"},{"location":"authentication/#token-storage","title":"Token Storage","text":"<p>ESIHub doesn't handle long-term token storage. You should implement secure storage for tokens in your application, such as an encrypted database.</p> <p>Remember to always keep your Client Secret and user tokens secure!</p>"},{"location":"comprehensive_guide/","title":"ESIHub Comprehensive Guide","text":""},{"location":"comprehensive_guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Core Features</li> <li>Performance Optimizations</li> <li>Stability Enhancements</li> <li>Advanced Features</li> <li>Usage Examples</li> <li>Best Practices</li> </ol>"},{"location":"comprehensive_guide/#1-introduction","title":"1. Introduction","text":"<p>ESIHub is a high-performance, feature-rich Python client for interacting with the EVE Online ESI API. It's designed to provide developers with a robust, efficient, and easy-to-use interface for building EVE Online applications.</p>"},{"location":"comprehensive_guide/#2-core-features","title":"2. Core Features","text":""},{"location":"comprehensive_guide/#21-asynchronous-operations","title":"2.1 Asynchronous Operations","text":"<p>ESIHub is built on top of <code>aiohttp</code>, providing full support for asynchronous operations.</p>"},{"location":"comprehensive_guide/#22-automatic-rate-limiting","title":"2.2 Automatic Rate Limiting","text":"<p>Built-in rate limiting ensures your application stays within EVE Online's API usage guidelines.</p>"},{"location":"comprehensive_guide/#23-caching","title":"2.3 Caching","text":"<p>Efficient caching mechanisms reduce unnecessary API calls and improve response times.</p>"},{"location":"comprehensive_guide/#24-error-handling","title":"2.4 Error Handling","text":"<p>Comprehensive error handling with custom exceptions for different error scenarios.</p>"},{"location":"comprehensive_guide/#25-logging","title":"2.5 Logging","text":"<p>Detailed logging capabilities for easy debugging and monitoring.</p>"},{"location":"comprehensive_guide/#3-performance-optimizations","title":"3. Performance Optimizations","text":""},{"location":"comprehensive_guide/#31-connection-pooling","title":"3.1 Connection Pooling","text":"<p>Optimized connection pool for efficient connection reuse and management.</p>"},{"location":"comprehensive_guide/#32-adaptive-retry-mechanism","title":"3.2 Adaptive Retry Mechanism","text":"<p>Intelligent retry logic that adapts to network conditions.</p>"},{"location":"comprehensive_guide/#33-asynchronous-task-queue","title":"3.3 Asynchronous Task Queue","text":"<p>Efficient management of concurrent requests.</p>"},{"location":"comprehensive_guide/#34-memory-usage-optimization","title":"3.4 Memory Usage Optimization","text":"<p>Techniques for handling large datasets without exhausting memory.</p>"},{"location":"comprehensive_guide/#35-data-compression","title":"3.5 Data Compression","text":"<p>Automatic compression and decompression of request and response data.</p>"},{"location":"comprehensive_guide/#36-load-balancing","title":"3.6 Load Balancing","text":"<p>Intelligent distribution of requests across multiple servers.</p>"},{"location":"comprehensive_guide/#4-stability-enhancements","title":"4. Stability Enhancements","text":""},{"location":"comprehensive_guide/#41-circuit-breaker-pattern","title":"4.1 Circuit Breaker Pattern","text":"<p>Prevents cascading failures by failing fast when issues are detected.</p>"},{"location":"comprehensive_guide/#42-error-prediction","title":"4.2 Error Prediction","text":"<p>Analyzes error patterns to predict and preemptively handle potential issues.</p>"},{"location":"comprehensive_guide/#43-automatic-scaling","title":"4.3 Automatic Scaling","text":"<p>Dynamically adjusts resources based on load.</p>"},{"location":"comprehensive_guide/#44-cache-consistency","title":"4.4 Cache Consistency","text":"<p>Ensures data integrity in the cache.</p>"},{"location":"comprehensive_guide/#5-advanced-features","title":"5. Advanced Features","text":""},{"location":"comprehensive_guide/#51-sso-integration","title":"5.1 SSO Integration","text":"<p>Built-in support for EVE Online's Single Sign-On system.</p>"},{"location":"comprehensive_guide/#52-webhook-support","title":"5.2 Webhook Support","text":"<p>Ability to send and receive webhooks for real-time updates.</p>"},{"location":"comprehensive_guide/#53-cli-tool","title":"5.3 CLI Tool","text":"<p>Command-line interface for quick testing and debugging.</p>"},{"location":"comprehensive_guide/#54-telemetry-and-monitoring","title":"5.4 Telemetry and Monitoring","text":"<p>Integration with OpenTelemetry for distributed tracing and Prometheus for metrics.</p>"},{"location":"comprehensive_guide/#55-automatic-api-version-management","title":"5.5 Automatic API Version Management","text":"<p>Seamless handling of different API versions.</p>"},{"location":"comprehensive_guide/#6-usage-examples","title":"6. Usage Examples","text":"<pre><code>from esihub import ESIHubClient\n\nasync with ESIHubClient() as client:\n    # Basic request\n    character_info = await client.request(\"GET\", \"/characters/{character_id}/\", character_id=12345)\n\n    # Paginated request\n    async for page in client.paginate(\"GET\", \"/characters/{character_id}/assets/\", character_id=12345):\n        print(page)\n\n    # Batch request\n    results = await client.batch_request([\n        {\"method\": \"GET\", \"path\": \"/characters/{character_id}/\", \"character_id\": 12345},\n        {\"method\": \"GET\", \"path\": \"/corporations/{corporation_id}/\", \"corporation_id\": 67890}\n    ])\n</code></pre>"},{"location":"comprehensive_guide/#7-best-practices","title":"7. Best Practices","text":"<ul> <li>Use asynchronous context managers for proper resource management.</li> <li>Implement appropriate error handling for different types of exceptions.</li> <li>Utilize caching for frequently accessed, rarely changing data.</li> <li>Monitor your application's performance using the provided telemetry and monitoring tools.</li> <li>Regularly update to the latest version of ESIHub to benefit from performance improvements and bug fixes.</li> </ul> <p>For more detailed information on each feature, please refer to the specific documentation sections.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>ESIHub can be configured using environment variables or programmatically.</p>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>ESI_CLIENT_ID</code>: Your EVE Online application's client ID</li> <li><code>ESI_CLIENT_SECRET</code>: Your EVE Online application's client secret</li> <li><code>ESI_CALLBACK_URL</code>: The callback URL for your application</li> <li><code>ESI_BASE_URL</code>: The base URL for the ESI API (default: \"https://esi.evetech.net\")</li> <li><code>ESI_REDIS_URL</code>: The URL for your Redis instance (default: \"redis://localhost:6379\")</li> <li><code>ESI_LOG_LEVEL</code>: The logging level (default: \"INFO\")</li> </ul> <p>Example:</p> <pre><code>export ESI_CLIENT_ID=your_client_id\nexport ESI_CLIENT_SECRET=your_client_secret\nexport ESI_CALLBACK_URL=http://localhost:8000/callback\nexport ESI_REDIS_URL=redis://localhost:6379\nexport ESI_LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"configuration/#programmatic-configuration","title":"Programmatic Configuration","text":"<p>You can also configure ESIHub programmatically when initializing the client:</p> <pre><code>from esihub import ESIHubClient\nfrom esihub.core.cache import ESICache\nfrom esihub.core.rate_limiter import ESIRateLimiter\n\nclient = ESIHubClient(\n    client_id=\"your_client_id\",\n    client_secret=\"your_client_secret\",\n    callback_url=\"your_callback_url\",\n    base_url=\"https://esi.evetech.net\",\n    cache=ESICache(redis_url=\"redis://localhost:6379\"),\n    rate_limiter=ESIRateLimiter(rate=150, per=1.0)\n)\n</code></pre> <p>This approach allows for more fine-grained control over the client's behavior.</p> <p>Remember to keep your client ID and secret secure, and never commit them to version control.</p>"},{"location":"detailed_guide/","title":"ESIHub Detailed Guide","text":""},{"location":"detailed_guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Installation</li> <li>Client Initialization</li> <li>Making Requests</li> <li>Pagination</li> <li>SSO (Single Sign-On)</li> <li>Caching</li> <li>Rate Limiting</li> <li>Error Handling</li> <li>Telemetry and Monitoring</li> <li>Advanced Usage</li> </ol>"},{"location":"detailed_guide/#1-installation","title":"1. Installation","text":"<p>To install ESIHub, use pip:</p> <pre><code>pip install esihub-client\n</code></pre>"},{"location":"detailed_guide/#2-client-initialization","title":"2. Client Initialization","text":"<p>You can initialize the ESIHubClient with or without SSO capabilities:</p> <pre><code>from esihub import ESIHubClient\n\n# Without SSO\nclient = ESIHubClient()\n\n# With SSO\nclient_with_sso = ESIHubClient(\n    client_id=\"your_client_id\",\n    client_secret=\"your_client_secret\",\n    redirect_uri=\"your_redirect_uri\"\n)\n</code></pre>"},{"location":"detailed_guide/#3-making-requests","title":"3. Making Requests","text":"<p>To make a request to the ESI API:</p> <pre><code>async with ESIHubClient() as client:\n    response = await client.request(\"GET\", \"/universe/systems/\", token=\"your_access_token\")\n    print(response)\n</code></pre>"},{"location":"detailed_guide/#4-pagination","title":"4. Pagination","text":"<p>For endpoints that support pagination:</p> <pre><code>async with ESIHubClient() as client:\n    async for page in client.paginate(\"GET\", \"/characters/12345/assets/\", token=\"your_access_token\"):\n        print(page)\n</code></pre>"},{"location":"detailed_guide/#5-sso-single-sign-on","title":"5. SSO (Single Sign-On)","text":"<p>If you've initialized the client with SSO capabilities:</p> <pre><code>async with ESIHubClient(client_id=\"id\", client_secret=\"secret\", redirect_uri=\"uri\") as client:\n    # Get authorization URL\n    auth_url = await client.get_authorization_url()\n    print(f\"Please visit: {auth_url}\")\n\n    # After user authorizes, they'll be redirected with a code\n    code = input(\"Enter the code from the redirect URL: \")\n    token = await client.fetch_token(code)\n\n    # Use the token for authenticated requests\n    character_info = await client.request(\"GET\", \"/characters/12345/\", token=token['access_token'])\n    print(character_info)\n\n    # Refresh the token when it expires\n    new_token = await client.refresh_token(token['refresh_token'])\n</code></pre>"},{"location":"detailed_guide/#6-caching","title":"6. Caching","text":"<p>ESIHub uses Redis for caching by default. Ensure you have Redis running, or configure a different caching mechanism:</p> <pre><code>from esihub.core.cache import Cache\n\ncustom_cache = Cache(redis_url=\"redis://your-custom-redis:6379\")\nclient = ESIHubClient(cache=custom_cache)\n</code></pre>"},{"location":"detailed_guide/#7-rate-limiting","title":"7. Rate Limiting","text":"<p>ESIHub handles rate limiting automatically. To customize:</p> <pre><code>from esihub.core.rate_limiter import RateLimiter\n\ncustom_limiter = RateLimiter(rate=100, per=1.0)  # 100 requests per second\nclient = ESIHubClient(rate_limiter=custom_limiter)\n</code></pre>"},{"location":"detailed_guide/#8-error-handling","title":"8. Error Handling","text":"<p>ESIHub uses custom exceptions:</p> <pre><code>from esihub.exceptions import ESIHubException, ServerError\n\ntry:\n    response = await client.request(\"GET\", \"/some/endpoint/\")\nexcept ServerError as e:\n    print(f\"Server error: {e}\")\nexcept ESIHubException as e:\n    print(f\"General error: {e}\")\n</code></pre>"},{"location":"detailed_guide/#9-telemetry-and-monitoring","title":"9. Telemetry and Monitoring","text":""},{"location":"detailed_guide/#opentelemetry","title":"OpenTelemetry","text":"<p>ESIHub integrates with OpenTelemetry for distributed tracing:</p> <pre><code>from opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom opentelemetry.exporter.jaeger.thrift import JaegerExporter\n\ntrace.set_tracer_provider(TracerProvider())\njaeger_exporter = JaegerExporter(\n    agent_host_name=\"localhost\",\n    agent_port=6831,\n)\ntrace.get_tracer_provider().add_span_processor(BatchSpanProcessor(jaeger_exporter))\n</code></pre>"},{"location":"detailed_guide/#prometheus","title":"Prometheus","text":"<p>ESIHub exposes Prometheus metrics. To use them:</p> <pre><code>from prometheus_client import start_http_server\n\n# Start Prometheus HTTP server\nstart_http_server(8000)\n\n# Your ESIHub client usage here\n# Metrics will be available at http://localhost:8000\n</code></pre> <p>Available metrics: - <code>esihub_requests_total</code>: Total number of requests made - <code>esihub_request_duration_seconds</code>: Histogram of request durations</p>"},{"location":"detailed_guide/#10-advanced-usage","title":"10. Advanced Usage","text":""},{"location":"detailed_guide/#custom-session-management","title":"Custom Session Management","text":"<p>For more control over the aiohttp ClientSession:</p> <pre><code>from esihub.core.connection_pool import ConnectionPool\n\ncustom_pool = ConnectionPool(pool_size=200)\nclient = ESIHubClient(connection_pool=custom_pool)\n</code></pre>"},{"location":"detailed_guide/#version-management","title":"Version Management","text":"<p>ESIHub automatically uses the latest stable version of the ESI API. To use a specific version:</p> <pre><code>response = await client.request(\"GET\", \"/universe/systems/\", version=\"v1\")\n</code></pre>"},{"location":"detailed_guide/#performance-monitoring","title":"Performance Monitoring","text":"<p>Access performance metrics:</p> <pre><code>from esihub.utils.performance import performance_monitor\n\nmetrics = performance_monitor.get_metrics()\nprint(f\"Average request time: {metrics['average_request_time']} seconds\")\nprint(f\"Total requests: {metrics['total_requests']}\")\n</code></pre> <p>This detailed guide covers all major features of the ESIHub client. Always refer to the official ESI documentation for the most up-to-date information on available endpoints and their parameters.</p>"},{"location":"development_setup/","title":"Development Setup","text":"<p>This guide will help you set up your development environment for contributing to ESIHub.</p>"},{"location":"development_setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>poetry (Python package manager)</li> <li>Git</li> </ul>"},{"location":"development_setup/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<ol> <li> <p>Fork the ESIHub repository on GitHub.</p> </li> <li> <p>Clone your fork locally:    <pre><code>git clone https://github.com/siege-green/esihub.git\ncd esihub\n</code></pre></p> </li> <li> <p>Create a virtual environment:    <pre><code>python -m venv venv\n</code></pre></p> </li> <li> <p>Activate the virtual environment:</p> </li> <li>On Windows:      <pre><code>venv\\Scripts\\activate\n</code></pre></li> <li> <p>On macOS and Linux:      <pre><code>source venv/bin/activate\n</code></pre></p> </li> <li> <p>Install the development dependencies:    <pre><code>poetry install\n</code></pre></p> </li> </ol>"},{"location":"development_setup/#running-tests","title":"Running Tests","text":"<p>To run the test suite:</p> <pre><code>pytest\n</code></pre>"},{"location":"development_setup/#code-style","title":"Code Style","text":"<p>We use Black for code formatting and isort for import sorting. You can format your code by running:</p> <pre><code>black .\nisort .\n</code></pre>"},{"location":"development_setup/#building-documentation","title":"Building Documentation","text":"<p>To build the documentation locally:</p> <pre><code>cd docs\nmake html\n</code></pre> <p>The built documentation will be in the <code>docs/_build/html</code> directory.</p>"},{"location":"development_setup/#setting-up-esi-api-credentials","title":"Setting Up ESI API Credentials","text":"<p>To run integration tests or use ESIHub for development, you'll need to set up ESI API credentials:</p> <ol> <li>Go to the EVE Developers Portal.</li> <li>Create a new application or use an existing one.</li> <li>Set the following environment variables with your credentials:    <pre><code>export ESI_CLIENT_ID=your_client_id\nexport ESI_CLIENT_SECRET=your_client_secret\nexport ESI_CALLBACK_URL=your_callback_url\n</code></pre></li> </ol> <p>Now you're all set to start developing with ESIHub!</p>"},{"location":"error_handling/","title":"Error Handling","text":"<p>ESIHub provides custom exceptions to help you handle different types of errors that may occur when interacting with the ESI API.</p>"},{"location":"error_handling/#exception-hierarchy","title":"Exception Hierarchy","text":"<ul> <li><code>ESIHubException</code>: Base exception for all ESIHub errors</li> <li><code>ESIServerError</code>: Raised when the server returns an error (5xx status codes)</li> <li><code>ESIAuthenticationError</code>: Raised when authentication fails (401, 403 status codes)</li> <li><code>ESIRateLimitExceeded</code>: Raised when the rate limit is exceeded (429 status code)</li> <li><code>ESIValidationError</code>: Raised when data validation fails</li> <li><code>ESICacheError</code>: Raised when there's an error with caching</li> </ul>"},{"location":"error_handling/#handling-exceptions","title":"Handling Exceptions","text":"<p>Here's an example of how to handle these exceptions:</p> <pre><code>from esihub import ESIHubClient\nfrom esihub.exceptions import (\n    ESIHubException,\n    ESIServerError,\n    ESIAuthenticationError,\n    ESIRateLimitExceeded\n)\n\nclient = ESIHubClient(...)\n\ntry:\n    character_info = await client.get_characters_character_id(character_id=12345)\nexcept ESIServerError as e:\n    print(f\"Server error occurred: {e}\")\nexcept ESIAuthenticationError as e:\n    print(f\"Authentication failed: {e}\")\nexcept ESIRateLimitExceeded as e:\n    print(f\"Rate limit exceeded: {e}\")\nexcept ESIHubException as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"error_handling/#automatic-retries","title":"Automatic Retries","text":"<p>ESIHub automatically retries requests that fail due to rate limiting or temporary server errors. You can customize this behavior:</p> <pre><code>from esihub.core.error_handler import ESIErrorHandler\n\ncustom_error_handler = ESIErrorHandler(max_retries=5, base_delay=1.0)\nclient = ESIHubClient(..., error_handler=custom_error_handler)\n</code></pre> <p>By properly handling these exceptions, you can make your application more robust and responsive to various error conditions.</p>"},{"location":"examples/","title":"Examples","text":"<p>This document provides practical examples of using ESIHub in various scenarios.</p>"},{"location":"examples/#basic-character-information","title":"Basic Character Information","text":"<pre><code>import asyncio\nfrom esihub import ESIHubClient\n\nasync def get_character_info(character_id: int):\n    async with ESIHubClient(...) as client:\n        info = await client.get_characters_character_id(character_id=character_id)\n        print(f\"Character Name: {info['name']}\")\n        print(f\"Corporation ID: {info['corporation_id']}\")\n\nasyncio.run(get_character_info(12345))\n</code></pre>"},{"location":"examples/#corporation-assets","title":"Corporation Assets","text":"<pre><code>import asyncio\nfrom esihub import ESIHubClient\n\nasync def get_corporation_assets(corporation_id: int, token: str):\n    async with ESIHubClient(...) as client:\n        assets = []\n        async for page in client.get_corporations_corporation_id_assets(corporation_id=corporation_id, token=token):\n            assets.extend(page)\n        print(f\"Total assets: {len(assets)}\")\n\nasyncio.run(get_corporation_assets(67890, \"access_token_here\"))\n</code></pre>"},{"location":"examples/#market-orders","title":"Market Orders","text":"<pre><code>import asyncio\nfrom esihub import ESIHubClient\n\nasync def get_market_orders(region_id: int, type_id: int):\n    async with ESIHubClient(...) as client:\n        orders = await client.get_markets_region_id_orders(\n            region_id=region_id,\n            type_id=type_id,\n            order_type='all'\n        )\n        print(f\"Total orders: {len(orders)}\")\n        print(f\"Lowest sell price: {min(order['price'] for order in orders if order['is_buy_order'] == False)}\")\n        print(f\"Highest buy price: {max(order['price'] for order in orders if order['is_buy_order'] == True)}\")\n\nasyncio.run(get_market_orders(10000002, 34))  # Tritanium in The Forge\n</code></pre>"},{"location":"examples/#batch-requests","title":"Batch Requests","text":"<pre><code>import asyncio\nfrom esihub import ESIHubClient\n\nasync def get_multiple_characters(character_ids: list):\n    async with ESIHubClient(...) as client:\n        requests = [\n            {\"method\": \"GET\", \"path\": f\"/characters/{char_id}/\", \"character_id\": char_id}\n            for char_id in character_ids\n        ]\n        results = await client.batch_request(requests)\n        for result in results:\n            print(f\"Character Name: {result['name']}\")\n\nasyncio.run(get_multiple_characters([12345, 67890, 13579]))\n</code></pre> <p>These examples demonstrate some common use cases for ESIHub. Remember to replace the placeholder values (client initialization parameters, character IDs, access tokens) with your actual data when using these examples.</p>"},{"location":"performance_optimization/","title":"ESIHub Performance Optimization Guide","text":""},{"location":"performance_optimization/#1-leverage-caching","title":"1. Leverage Caching","text":"<ul> <li>Use caching for data that doesn't change frequently to reduce API calls.</li> <li>Set appropriate expiration times in the <code>ESICache.set</code> method.</li> <li>Utilize dynamic TTL to extend cache time for frequently requested data.</li> </ul>"},{"location":"performance_optimization/#2-use-batch-requests","title":"2. Use Batch Requests","text":"<ul> <li>Utilize the <code>batch_request</code> method when processing multiple requests simultaneously.</li> <li>Use the default batch size of 20, adjusting as needed.</li> <li>Consider rate limits when making large batch requests and introduce appropriate intervals.</li> </ul>"},{"location":"performance_optimization/#3-asynchronous-programming","title":"3. Asynchronous Programming","text":"<ul> <li>Make the most of <code>asyncio</code> to efficiently handle I/O-bound tasks.</li> <li>Write asynchronous code using <code>async/await</code> syntax.</li> <li>Use <code>asyncio.gather</code> to execute multiple tasks concurrently.</li> </ul>"},{"location":"performance_optimization/#4-connection-pooling","title":"4. Connection Pooling","text":"<ul> <li>Use <code>ESIConnectionPool</code> to reuse HTTP connections.</li> <li>Adjust the pool size according to your application's requirements.</li> </ul>"},{"location":"performance_optimization/#5-error-handling-and-retries","title":"5. Error Handling and Retries","text":"<ul> <li>Implement automatic retry mechanisms for transient errors.</li> <li>Use backoff strategies to prevent consecutive failures.</li> </ul>"},{"location":"performance_optimization/#6-monitor-prometheus-metrics","title":"6. Monitor Prometheus Metrics","text":"<ul> <li>Monitor <code>request_counter</code> and <code>request_duration</code> metrics to identify performance bottlenecks.</li> <li>Regularly analyze metrics to find performance improvement points.</li> </ul>"},{"location":"performance_optimization/#7-optimize-logging","title":"7. Optimize Logging","text":"<ul> <li>Adjust log levels appropriately in production environments to reduce unnecessary logging.</li> <li>Ensure sensitive information is not exposed in logs.</li> </ul>"},{"location":"performance_optimization/#8-memory-management","title":"8. Memory Management","text":"<ul> <li>Use generators or streaming methods when processing large amounts of data to optimize memory usage.</li> <li>Release unnecessary objects promptly to aid garbage collection.</li> </ul>"},{"location":"performance_optimization/#9-efficient-api-usage","title":"9. Efficient API Usage","text":"<ul> <li>Understand and utilize ESI's etag system to reduce unnecessary data transfer.</li> <li>Use appropriate endpoints for bulk data retrieval when available.</li> </ul>"},{"location":"performance_optimization/#10-client-side-optimization","title":"10. Client-Side Optimization","text":"<ul> <li>Implement client-side caching for frequently accessed, rarely changing data.</li> <li>Use compression when making requests to reduce data transfer.</li> </ul> <p>Apply these techniques according to the specific characteristics of your application using ESIHub. Regular performance testing and profiling will help identify areas for further optimization.</p>"},{"location":"python_311_features/","title":"Python 3.11 Features in ESIHub","text":"<p>ESIHub leverages several new features introduced in Python 3.11 to improve performance, code quality, and developer experience. This document outlines these features and how they are used in ESIHub.</p>"},{"location":"python_311_features/#1-improved-error-messages","title":"1. Improved Error Messages","text":"<p>Python 3.11 provides more precise error locations and better error messages. This helps in debugging ESIHub code and identifying issues more quickly. For example:</p> <pre><code>try:\n    # Some ESIHub operation\nexcept ESIHubException as e:\n    print(f\"An error occurred: {e}\")\n    # The error message will now include more context and precise location\n</code></pre>"},{"location":"python_311_features/#2-faster-cpython","title":"2. Faster CPython","text":"<p>Python 3.11 includes significant performance improvements in the CPython interpreter. ESIHub benefits from these improvements, resulting in faster execution times for your EVE Online API interactions.</p>"},{"location":"python_311_features/#3-enhanced-type-hinting","title":"3. Enhanced Type Hinting","text":"<p>ESIHub uses the new type hinting features in Python 3.11, including:</p> <ul> <li>The ability to use <code>Self</code> type for more accurate method return annotations.</li> <li>Improved support for <code>TypedDict</code>, which is used in ESIHub for better type hinting of dictionary responses from the ESI API.</li> </ul> <p>Example:</p> <pre><code>from typing import TypedDict, Self\n\nclass Character(TypedDict):\n    id: int\n    name: str\n\nclass ESIHubClient:\n    def get_character(self, character_id: int) -&gt; Character:\n        # ...\n\n    def with_base_url(self, base_url: str) -&gt; Self:\n        self.base_url = base_url\n        return self\n</code></pre>"},{"location":"python_311_features/#4-exception-groups","title":"4. Exception Groups","text":"<p>ESIHub uses exception groups to handle multiple exceptions that may occur during batch operations:</p> <pre><code>try:\n    results = await client.batch_request([...])\nexcept* ESIHubException as eg:\n    for exc in eg.exceptions:\n        print(f\"Operation failed: {exc}\")\n</code></pre>"},{"location":"python_311_features/#5-improved-asyncio-support","title":"5. Improved Asyncio Support","text":"<p>ESIHub leverages the improved asyncio support in Python 3.11, including:</p> <ul> <li>The new <code>asyncio.TaskGroup</code> for managing groups of related tasks.</li> <li>Improved task cancellation and error handling in asyncio.</li> </ul> <p>Example:</p> <pre><code>async with asyncio.TaskGroup() as tg:\n    character_task = tg.create_task(client.get_characters_character_id(character_id=123))\n    corporation_task = tg.create_task(client.get_corporations_corporation_id(corporation_id=456))\n\ncharacter_info = character_task.result()\ncorporation_info = corporation_task.result()\n</code></pre>"},{"location":"python_311_features/#6-performance-monitoring","title":"6. Performance Monitoring","text":"<p>ESIHub uses Python 3.11's improved performance monitoring tools to help identify bottlenecks and optimize code:</p> <pre><code>import tracemalloc\n\ntracemalloc.start()\n\n# Perform some ESIHub operations\n\nsnapshot = tracemalloc.take_snapshot()\ntop_stats = snapshot.statistics('lineno')\n\nprint(\"[ Top 10 ]\")\nfor stat in top_stats[:10]:\n    print(stat)\n</code></pre> <p>By utilizing these Python 3.11 features, ESIHub provides a more efficient, type-safe, and developer-friendly experience for interacting with the EVE Online ESI API.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide helps you diagnose and solve common issues you might encounter while using ESIHub Client.</p>"},{"location":"troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"troubleshooting/#1-authentication-errors","title":"1. Authentication Errors","text":"<p>Symptom: You receive an <code>AuthenticationError</code> when making requests.</p> <p>Possible Causes and Solutions: - Expired access token: Refresh your token using the <code>refresh_token</code> method. - Invalid client credentials: Double-check your client ID and secret. - Incorrect scopes: Ensure you've requested the necessary scopes for your operations.</p>"},{"location":"troubleshooting/#2-rate-limiting-errors","title":"2. Rate Limiting Errors","text":"<p>Symptom: You receive a <code>RateLimitExceeded</code> error.</p> <p>Solution:  - The client should handle this automatically. If you're still seeing this error, try reducing your request frequency or increasing the rate limit in your ESIHubClient configuration.</p>"},{"location":"troubleshooting/#3-caching-issues","title":"3. Caching Issues","text":"<p>Symptom: Data seems outdated or caching doesn't appear to be working.</p> <p>Solutions: - Verify your Redis server is running and accessible. - Check the cache expiration settings in your configuration. - Ensure you're not bypassing the cache unintentionally.</p>"},{"location":"troubleshooting/#4-connection-pool-exhaustion","title":"4. Connection Pool Exhaustion","text":"<p>Symptom: You receive a <code>ConnectionPoolExhausted</code> error.</p> <p>Solution:  - Increase the size of your connection pool. - Ensure you're properly closing your connections after use.</p>"},{"location":"troubleshooting/#debugging-tips","title":"Debugging Tips","text":"<ol> <li> <p>Enable debug logging:    <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre></p> </li> <li> <p>Use OpenTelemetry tracing to get detailed insights into request flow.</p> </li> <li> <p>Monitor Prometheus metrics to identify performance bottlenecks.</p> </li> </ol> <p>If you're still experiencing issues after trying these solutions, please file an issue on our GitHub repository with a detailed description of the problem and steps to reproduce it.</p>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#dynamic-endpoint-methods","title":"Dynamic Endpoint Methods","text":"<p>ESIHub uses the EVE Swagger Interface (ESI) specification to dynamically generate methods for all available API endpoints. This feature provides several benefits:</p> <ol> <li>Intuitive method names based on API paths</li> <li>Automatic parameter validation</li> <li>Better IDE autocomplete support</li> <li>Up-to-date with the latest ESI changes</li> </ol>"},{"location":"usage/#how-it-works","title":"How it works","text":"<p>When you initialize an <code>ESIHubClient</code>, it reads the Swagger specification and generates methods for each endpoint. The method names are created by converting the URL path to a Python-friendly format.</p> <p>For example: - <code>/characters/{character_id}/</code> becomes <code>get_characters_character_id()</code> - <code>/corporations/{corporation_id}/assets/</code> becomes <code>get_corporations_corporation_id_assets()</code></p>"},{"location":"usage/#using-dynamic-endpoint-methods","title":"Using dynamic endpoint methods","text":"<p>Instead of using the generic <code>request()</code> method, you can use these dynamically generated methods directly:</p> <pre><code>async with ESIHubClient() as client:\n    # Get character information\n    character_info = await client.get_characters_character_id(character_id=12345)\n\n    # Get corporation assets\n    corp_assets = await client.get_corporations_corporation_id_assets(corporation_id=67890)\n\n    # Post a fleet invitation\n    invitation_result = await client.post_fleets_fleet_id_members(\n        fleet_id=123456,\n        invitation={'character_id': 78901, 'role': 'squad_member'}\n    )\n</code></pre>"},{"location":"usage/#benefits-of-using-dynamic-endpoint-methods","title":"Benefits of using dynamic endpoint methods","text":"<ol> <li>Type hinting: The methods provide proper type hints for parameters and return values.</li> <li>Documentation: Each method includes docstrings from the Swagger spec, viewable in your IDE.</li> <li>Validation: Parameters are validated before making the request, catching errors early.</li> <li>Discoverability: You can easily explore available methods using your IDE's autocomplete feature.</li> </ol>"},{"location":"usage/#handling-path-parameters","title":"Handling path parameters","text":"<p>For endpoints with path parameters (like <code>{character_id}</code>), provide these as keyword arguments:</p> <pre><code>character_info = await client.get_characters_character_id(character_id=12345)\n</code></pre>"},{"location":"usage/#handling-query-parameters","title":"Handling query parameters","text":"<p>For endpoints with query parameters, provide these as keyword arguments as well:</p> <pre><code>search_results = await client.get_search(\n    categories=['character', 'corporation'],\n    search='Test'\n)\n</code></pre>"},{"location":"usage/#handling-request-bodies","title":"Handling request bodies","text":"<p>For POST, PUT, and PATCH methods that require a request body, provide the data as a dictionary:</p> <pre><code>new_fleet = await client.post_fleets(\n    create_fleet_request={\n        'motd': 'Welcome to the fleet!',\n        'is_free_move': True\n    }\n)\n</code></pre> <p>By using these dynamically generated methods, you can interact with the ESI API in a more natural and pythonic way, while benefiting from improved code completion and inline documentation in your IDE.</p>"}]}